Project structure:
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\AndroidManifest.xml
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\java\com\example\rrhe\ui\theme\Color.kt
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\java\com\example\rrhe\ui\theme\Theme.kt
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\java\com\example\rrhe\ui\theme\Type.kt
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\java\com\example\rrhe\ApiConfig.kt
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\java\com\example\rrhe\ApiClient.kt
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\java\com\example\rrhe\ApiService.kt
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\java\com\example\rrhe\Emulator.kt
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\java\com\example\rrhe\ImageDialogFragment.kt
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\java\com\example\rrhe\Plant.kt
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\java\com\example\rrhe\MyAppGlideModule.kt
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\java\com\example\rrhe\Network.kt
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\java\com\example\rrhe\PlantAdapter.kt
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\java\com\example\rrhe\PlantDetailsActivity.kt
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\java\com\example\rrhe\PlantDetailsAdapter.kt
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\java\com\example\rrhe\SearchBar.kt
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\java\com\example\rrhe\StockActivity.kt
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\res\drawable\circle_shape.xml
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\res\drawable\ic_clear.xml
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\res\drawable\ic_qr_code.xml
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\res\drawable\ic_search.xml
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\res\drawable\error_image.png
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\res\drawable\loading_placeholder.xml
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\res\layout\activity_stock.xml
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\res\layout\image_popup.xml
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\res\layout\item_plant.xml
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\res\layout\item_popup.xml
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\res\values\colors.xml
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\res\values\strings.xml
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\res\values\themes.xml
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\res\xml\backup_rules.xml
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\res\xml\data_extraction_rules.xml
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\src\main\res\xml\network_security_config.xml
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\build.gradle.kts
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\app\build.gradle.kts
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\gradle.properties
C:\Users\gijs\Documents\RRHE\RRHE_Android_App\settings.gradle.kts
other default files...

Project Code:

AndroidManifest.xml:

<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <!-- Network permissions -->
    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.RRHE"
        android:networkSecurityConfig="@xml/network_security_config">

        <!-- Plant Details Activity -->
        <activity android:name=".PlantDetailsActivity" />

        <!-- Stock Activity -->
        <activity
            android:name=".StockActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>


Color.kt:

package com.example.rrhe.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)


Theme.kt:

package com.example.rrhe.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40

    /* Other default colors to override
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    */
)

@Composable
fun RRHETheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }

        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}


Type.kt:

package com.example.rrhe.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)


ApiConfig.kt:

package com.example.rrhe

object ApiConfig {
    const val BASE_URL = "http://192.168.1.110:5000/"
}


ApiClient.kt:

package com.example.rrhe

import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

object ApiClient {
    val retrofit: Retrofit by lazy {
        Retrofit.Builder()
            .baseUrl(ApiConfig.BASE_URL)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
    }

    val apiService: ApiService by lazy {
        retrofit.create(ApiService::class.java)
    }
}


ApiService.kt:

package com.example.rrhe

import retrofit2.Call
import retrofit2.http.GET

interface ApiService {
    @GET("rrhe")
    fun getRRHE(): Call<List<Plant>>
}


Emulator.kt:

package com.example.rrhe

import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

object Emulator {
    private const val BASE_URL = "http://10.0.2.2:5000/"

    val apiService: ApiService by lazy {
        Retrofit.Builder()
            .baseUrl(BASE_URL)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(ApiService::class.java)
    }
}


ImageDialogFragment.kt:

package com.example.rrhe

import android.graphics.drawable.Drawable
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.DialogFragment
import com.bumptech.glide.Glide
import com.bumptech.glide.load.DataSource
import com.bumptech.glide.request.RequestOptions
import com.bumptech.glide.request.target.Target
import com.bumptech.glide.request.transition.Transition
import com.bumptech.glide.request.RequestListener
import com.bumptech.glide.load.engine.GlideException
import com.example.rrhe.databinding.ImagePopupBinding

class ImageDialogFragment : DialogFragment() {

    companion object {
        private const val ARG_IMAGE_URL = "image_url"

        fun newInstance(imageUrl: String?): ImageDialogFragment {
            val args = Bundle()
            args.putString(ARG_IMAGE_URL, imageUrl)
            val fragment = ImageDialogFragment()
            fragment.arguments = args
            return fragment
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        val binding = ImagePopupBinding.inflate(inflater, container, false)
        val imageUrl = arguments?.getString(ARG_IMAGE_URL)

        Glide.with(binding.imageViewPopup.context)
            .load(imageUrl)
            .apply(RequestOptions().placeholder(R.drawable.loading_placeholder))
            .listener(object : RequestListener<Drawable> {
                override fun onLoadFailed(
                    e: GlideException?,
                    model: Any?,
                    target: Target<Drawable>?,
                    isFirstResource: Boolean
                ): Boolean {
                    binding.errorImageView.visibility = View.VISIBLE
                    return false // important to return false so the error drawable can be placed
                }

                override fun onResourceReady(
                    resource: Drawable?,
                    model: Any?,
                    target: Target<Drawable>?,
                    dataSource: DataSource?,
                    isFirstResource: Boolean
                ): Boolean {
                    binding.errorImageView.visibility = View.GONE
                    return false
                }
            })
            .error(R.drawable.error_image)
            .into(binding.imageViewPopup)

        binding.root.setOnClickListener {
            dismiss()
        }

        return binding.root
    }

    override fun onStart() {
        super.onStart()
        dialog?.window?.setLayout(
            ViewGroup.LayoutParams.MATCH_PARENT,
            ViewGroup.LayoutParams.MATCH_PARENT
        )
    }
}


Plant.kt:

package com.example.rrhe

import android.os.Parcelable
import kotlinx.parcelize.Parcelize

@Parcelize
data class Plant(
    val StockID: Int,
    val NameConcat: String,
    val StockQty: Int,
    val PhotoLink1: String
) : Parcelable


MyAppGlideModule.kt:

package com.example.rrhe

import com.bumptech.glide.annotation.GlideModule
import com.bumptech.glide.module.AppGlideModule

@GlideModule
class MyAppGlideModule : AppGlideModule()


Network.kt:

package com.example.rrhe

import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

object Network {
    val apiService: ApiService by lazy {
        Retrofit.Builder()
            .baseUrl(ApiConfig.BASE_URL)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(ApiService::class.java)
    }
}


PlantAdapter.kt:

package com.example.rrhe

import android.content.Intent
import android.util.Log
import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.fragment.app.FragmentActivity
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.bumptech.glide.request.RequestOptions
import com.example.rrhe.databinding.ItemPlantBinding

class PlantAdapter(private val plants: List<Plant>) : RecyclerView.Adapter<PlantAdapter.PlantViewHolder>() {

    class PlantViewHolder(private val binding: ItemPlantBinding) : RecyclerView.ViewHolder(binding.root) {
        fun bind(plant: Plant) {
            binding.plantName.text = plant.NameConcat
            binding.plantStock.text = binding.root.context.getString(R.string.stock_text, plant.StockQty)
            binding.plantStockId.text = binding.root.context.getString(R.string.stock_id_text, plant.StockID)

            val requestOptions = RequestOptions()
                .circleCrop()
                .placeholder(R.drawable.circle_shape)  // Use circle_shape as the placeholder
                .error(R.drawable.circle_shape)        // Use circle_shape as the error image

            Glide.with(binding.plantImage.context)
                .load(plant.PhotoLink1)
                .apply(requestOptions)
                .listener(object : com.bumptech.glide.request.RequestListener<android.graphics.drawable.Drawable> {
                    override fun onLoadFailed(
                        e: com.bumptech.glide.load.engine.GlideException?,
                        model: Any?,
                        target: com.bumptech.glide.request.target.Target<android.graphics.drawable.Drawable>?,
                        isFirstResource: Boolean
                    ): Boolean {
                        Log.e("Glide", "Image load failed", e)
                        return false
                    }

                    override fun onResourceReady(
                        resource: android.graphics.drawable.Drawable?,
                        model: Any?,
                        target: com.bumptech.glide.request.target.Target<android.graphics.drawable.Drawable>?,
                        dataSource: com.bumptech.glide.load.DataSource?,
                        isFirstResource: Boolean
                    ): Boolean {
                        return false
                    }
                })
                .into(binding.plantImage)

            binding.plantImage.setOnClickListener {
                val activity = it.context as FragmentActivity
                val dialog = ImageDialogFragment.newInstance(plant.PhotoLink1)
                dialog.show(activity.supportFragmentManager, "imageDialog")
            }

            binding.root.setOnClickListener {
                val intent = Intent(binding.root.context, PlantDetailsActivity::class.java).apply {
                    putExtra("NameConcat", plant.NameConcat)
                    putExtra("StockID", plant.StockID)
                    putExtra("StockQty", plant.StockQty)
                    putExtra("PhotoLink1", plant.PhotoLink1)
                }
                binding.root.context.startActivity(intent)
            }
        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PlantViewHolder {
        val binding = ItemPlantBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return PlantViewHolder(binding)
    }

    override fun onBindViewHolder(holder: PlantViewHolder, position: Int) {
        holder.bind(plants[position])
    }

    override fun getItemCount(): Int {
        return plants.size
    }
}


PlantDetailsActivity.kt:

package com.example.rrhe

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import com.bumptech.glide.Glide
import com.example.rrhe.databinding.ActivityPlantDetailsBinding

class PlantDetailsActivity : AppCompatActivity() {

    private lateinit var binding: ActivityPlantDetailsBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityPlantDetailsBinding.inflate(layoutInflater)
        setContentView(binding.root)

        val nameConcat = intent.getStringExtra("NameConcat") ?: ""
        val stockID = intent.getIntExtra("StockID", 0)
        val stockQty = intent.getIntExtra("StockQty", 0)
        val photoLink1 = intent.getStringExtra("PhotoLink1") ?: ""

        binding.plantName.text = nameConcat
        binding.plantStockId.text = getString(R.string.stock_id_text, stockID)
        binding.plantStockQty.text = getString(R.string.stock_text, stockQty)

        Glide.with(this)
            .load(photoLink1)
            .error(R.drawable.error_image)
            .into(binding.plantImage)

        binding.backButton.setOnClickListener {
            finish()
        }

        binding.editButton.setOnClickListener {
            // Implement edit functionality later
        }
    }
}



PlantDetailsAdapter.kt:

package com.example.rrhe

import android.util.Log
import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.bumptech.glide.request.RequestOptions
import com.example.rrhe.databinding.ItemPlantDetailsBinding

class PlantDetailsAdapter(private val plants: List<Plant>) : RecyclerView.Adapter<PlantDetailsAdapter.PlantDetailsViewHolder>() {

    class PlantDetailsViewHolder(private val binding: ItemPlantDetailsBinding) : RecyclerView.ViewHolder(binding.root) {
        fun bind(plant: Plant) {
            binding.plantName.text = plant.NameConcat
            binding.plantStockId.text = binding.root.context.getString(R.string.stock_id_text, plant.StockID)
            binding.plantStockQty.text = binding.root.context.getString(R.string.stock_text, plant.StockQty)

            val requestOptions = RequestOptions()
                .circleCrop()
                .placeholder(R.drawable.circle_shape)
                .error(R.drawable.circle_shape)

            Glide.with(binding.plantImage.context)
                .load(plant.PhotoLink1)
                .apply(requestOptions)
                .listener(object : com.bumptech.glide.request.RequestListener<android.graphics.drawable.Drawable> {
                    override fun onLoadFailed(
                        e: com.bumptech.glide.load.engine.GlideException?,
                        model: Any?,
                        target: com.bumptech.glide.request.target.Target<android.graphics.drawable.Drawable>?,
                        isFirstResource: Boolean
                    ): Boolean {
                        Log.e("Glide", "Image load failed", e)
                        return false
                    }

                    override fun onResourceReady(
                        resource: android.graphics.drawable.Drawable?,
                        model: Any?,
                        target: com.bumptech.glide.request.target.Target<android.graphics.drawable.Drawable>?,
                        dataSource: com.bumptech.glide.load.DataSource?,
                        isFirstResource: Boolean
                    ): Boolean {
                        return false
                    }
                })
                .into(binding.plantImage)

            binding.backButton.setOnClickListener {
                (binding.root.context as? PlantDetailsActivity)?.finish()
            }

            binding.editButton.setOnClickListener {
                // Implement edit functionality later
            }
        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PlantDetailsViewHolder {
        val binding = ItemPlantDetailsBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return PlantDetailsViewHolder(binding)
    }

    override fun onBindViewHolder(holder: PlantDetailsViewHolder, position: Int) {
        holder.bind(plants[position])
    }

    override fun getItemCount(): Int {
        return plants.size
    }
}


SearchBar.kt:

package com.example.rrhe

import android.view.View
import android.widget.EditText
import android.widget.ImageView
import android.widget.LinearLayout
import androidx.core.widget.doOnTextChanged

class SearchBar(
    private val searchBarLayout: LinearLayout,
    private val searchEditText: EditText,
    private val searchIcon: ImageView,
    private val qrCodeButton: ImageView,
    private val clearSearchButton: ImageView,
    private val onSearch: (String) -> Unit
) {
    init {
        searchIcon.setOnClickListener {
            searchBarLayout.visibility = View.VISIBLE
            searchIcon.visibility = View.GONE
        }

        clearSearchButton.setOnClickListener {
            searchEditText.text.clear()
            searchBarLayout.visibility = View.GONE
            searchIcon.visibility = View.VISIBLE
        }

        searchEditText.doOnTextChanged { text, _, _, _ ->
            onSearch(text.toString())
        }

        qrCodeButton.setOnClickListener {
            // QR code scanning functionality will be added later
        }

        searchBarLayout.setOnFocusChangeListener { _, hasFocus ->
            if (!hasFocus) {
                searchBarLayout.visibility = View.GONE
                searchIcon.visibility = View.VISIBLE
            }
        }
    }
}


StockActivity.kt:

package com.example.rrhe

import android.os.Bundle
import android.util.Log
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.rrhe.databinding.ActivityStockBinding
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class StockActivity : AppCompatActivity() {

    private lateinit var binding: ActivityStockBinding
    private lateinit var searchBar: SearchBar
    private var plants: List<Plant> = emptyList()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityStockBinding.inflate(layoutInflater)
        setContentView(binding.root)

        binding.plantList.layoutManager = LinearLayoutManager(this)

        searchBar = SearchBar(
            binding.searchBarLayout,
            binding.searchEditText,
            binding.searchIcon,
            binding.qrCodeButton,
            binding.clearSearchButton
        ) { query -> performSearch(query) }

        fetchRRHE()
    }

    private fun fetchRRHE() {
        Network.apiService.getRRHE().enqueue(object : Callback<List<Plant>> {
            override fun onResponse(call: Call<List<Plant>>, response: Response<List<Plant>>) {
                if (response.isSuccessful) {
                    plants = response.body() ?: emptyList()
                    binding.plantList.adapter = PlantAdapter(plants)
                } else {
                    Log.e("StockActivity", "Failed to fetch data: ${response.message()}")
                }
            }

            override fun onFailure(call: Call<List<Plant>>, t: Throwable) {
                Log.e("StockActivity", "Failed to fetch data", t)
            }
        })
    }

    private fun performSearch(query: String) {
        val filteredPlants = if (query.isEmpty()) {
            plants
        } else {
            plants.filter {
                it.NameConcat.contains(query, ignoreCase = true) || it.StockID.toString() == query
            }
        }
        binding.plantList.adapter = PlantAdapter(filteredPlants)
    }
}


circle_shape.xml:

<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <solid android:color="@android:color/transparent" />
    <corners android:radius="30dp" /> <!-- This value should be half of the ImageView size to make it circular -->
    <stroke android:width="2dp" android:color="@android:color/black" />
</shape>


loading_placeholder.xml:

<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <solid android:color="#CCCCCC" />
    <size android:width="100dp" android:height="100dp"/>
</shape>


activity_stock.xml:

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".StockActivity">

    <!-- Search Icon -->
    <ImageView
        android:id="@+id/searchIcon"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:src="@drawable/ic_search"
        android:contentDescription="@string/search_icon_description"
        android:padding="8dp"
        android:layout_margin="8dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <!-- Search Bar -->
    <LinearLayout
        android:id="@+id/searchBarLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:visibility="gone"
        android:padding="8dp"
        android:background="?attr/selectableItemBackground"
        android:gravity="center_vertical"
        app:layout_constraintTop_toBottomOf="@id/searchIcon"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <EditText
            android:id="@+id/searchEditText"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:hint="@string/search_hint"
            android:inputType="text"
            android:padding="8dp" />

        <ImageView
            android:id="@+id/qrCodeButton"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:src="@drawable/ic_qr_code"
            android:contentDescription="@string/qr_code_button_description"
            android:padding="8dp" />

        <ImageView
            android:id="@+id/clearSearchButton"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:src="@drawable/ic_clear"
            android:contentDescription="@string/clear_search_button_description"
            android:padding="8dp" />
    </LinearLayout>

    <!-- RecyclerView -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/plantList"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        app:layout_constraintTop_toBottomOf="@id/searchBarLayout"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>
</androidx.constraintlayout.widget.ConstraintLayout>


image_popup.xml:

<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <ImageView
        android:id="@+id/imageViewPopup"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:contentDescription="@string/image_popup_description"
        android:scaleType="centerCrop" />

    <ImageView
        android:id="@+id/errorImageView"
        android:layout_width="50dp"
        android:layout_height="50dp"
        android:layout_gravity="center"
        android:visibility="gone"
        android:contentDescription="@string/error_image_description"
        android:scaleType="centerInside" />
</FrameLayout>


item_plant.xml:

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:padding="8dp">

    <ImageView
        android:id="@+id/plant_image"
        android:layout_width="60dp"
        android:layout_height="60dp"
        android:contentDescription="@string/plant_image"
        android:scaleType="centerCrop"
        android:layout_margin="8dp"
        android:background="@drawable/circle_shape"
        android:padding="0dp"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        tools:src="@tools:sample/avatars" />

    <TextView
        android:id="@+id/plant_name"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="16dp"
        android:textSize="16sp"
        android:textColor="@android:color/black"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toEndOf="@id/plant_image"
        app:layout_constraintTop_toTopOf="parent"
        tools:text="Plant Name" />

    <TextView
        android:id="@+id/plant_stock"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="16dp"
        android:textSize="14sp"
        android:textColor="@android:color/black"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toEndOf="@id/plant_image"
        app:layout_constraintTop_toBottomOf="@id/plant_name"
        tools:text="Stock: 0" />

    <TextView
        android:id="@+id/plant_stock_id"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="16dp"
        android:textSize="14sp"
        android:textColor="@android:color/black"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toEndOf="@id/plant_image"
        app:layout_constraintTop_toBottomOf="@id/plant_stock"
        tools:text="Stock ID: 10001" />

</androidx.constraintlayout.widget.ConstraintLayout>


item_popup.xml:

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="0dp">

    <ImageView
        android:id="@+id/plant_image"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:contentDescription="@string/plant_image"
        android:scaleType="centerCrop"
        android:background="@drawable/loading_placeholder"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>


ic_clear.xml:

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#000000"
        android:pathData="M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM16.59,16.59l-1.41,1.41L12,13.41 8.83,16.59 7.41,15.17 10.59,12 7.41,8.83 8.83,7.41 12,10.59 15.17,7.41 16.59,8.83 13.41,12 16.59,15.17z" />
</vector>


ic_qr_code.xml:

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#000000"
        android:pathData="M3,3h8V0H0v11h3V3zM3,21h8v-3H3v-8H0v11h3zM21,0h-8v3h8v8h3V0h-3zM15,21h8v-8h3v11H15v-3zM7,7h3V3H7v4zM7,21h3v-4H7v4zM17,21h3v-4h-3v4zM17,7h3V3h-3v4zM10,7h4v10h-4V7z" />
</vector>


ic_search.xml:

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#000000"
        android:pathData="M15.5,14h-0.79l-0.28,-0.27c0.98,-1.14 1.57,-2.61 1.57,-4.23 0,-3.58 -2.92,-6.5 -6.5,-6.5S3,5.92 3,9.5 5.92,16 9.5,16c1.62,0 3.09,-0.59 4.23,-1.57l0.27,0.28v0.79l5,4.99L20.49,19.5l-4.99,-5zM9.5,14C7.01,14 5,11.99 5,9.5S7.01,5 9.5,5 14,7.01 14,9.5 11.99,14 9.5,14z" />
</vector>


colors.xml:

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>


strings.xml:

<resources xmlns:tools="http://schemas.android.com/tools">
    <string name="app_name">RRHE</string>
    <string name="plant_image">Plant Image</string>
    <string name="plant_name">Plant Name</string>
    <string name="plant_stock">Plant Stock</string>
    <string name="stock_text">Stock: %1$d</string>
    <string name="stock_id_text">Stock ID: %1$d</string>
    <string name="image_popup_description">Full screen image</string>
    <string name="error_image_description">Error image</string>
    <string name="search_hint" tools:ignore="TypographyEllipsis">Search...</string>
    <string name="qr_code_button_description">Scan QR code</string>
    <string name="clear_search_button_description">Clear search</string>
    <string name="search_icon_description">Search</string>
    <string name="plant_details">Plant Details</string>
    <string name="back">Back</string>
    <string name="edit">Edit</string>
</resources>


themes.xml:

<resources xmlns:tools="http://schemas.android.com/tools">
    <style name="Theme.RRHE" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorOnPrimary">@color/white</item>
        <item name="colorSecondary">@color/teal_200</item>
        <item name="colorSecondaryVariant">@color/teal_700</item>
        <item name="colorOnSecondary">@color/black</item>
        <!-- Customize your theme here. -->
    </style>
</resources>


network_security_config.xml:

<?xml version="1.0" encoding="utf-8"?>
<network-security-config>
    <domain-config cleartextTrafficPermitted="true">
        <domain includeSubdomains="true">192.168.1.110</domain>
    </domain-config>
</network-security-config>


build.gradle.kts(project):

// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.jetbrains.kotlin.android) apply false
}


build.gradle.kts(app):

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("kotlin-kapt")
    id("kotlin-parcelize")
}

android {
    namespace = "com.example.rrhe"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.example.rrhe"
        minSdk = 24
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        compose = true
        viewBinding = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.1"
    }
    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

dependencies {
    implementation("androidx.appcompat:appcompat:1.4.1")
    implementation("androidx.constraintlayout:constraintlayout:2.1.3")
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
    implementation("com.github.bumptech.glide:glide:4.12.0")
    implementation("androidx.recyclerview:recyclerview:1.2.1")
    implementation("androidx.lifecycle:lifecycle-extensions:2.2.0")

    // Add these for Material Components
    implementation("com.google.android.material:material:1.6.1")

    // Add these for Glide to work properly
    kapt("com.github.bumptech.glide:compiler:4.12.0")

    // Add Jetpack Compose and Material3 dependencies
    implementation("androidx.compose.ui:ui:1.5.0")
    implementation("androidx.compose.material3:material3:1.1.0-alpha03")
    implementation("androidx.compose.ui:ui-tooling-preview:1.5.0")
    implementation("androidx.compose.runtime:runtime-livedata:1.5.0")
    debugImplementation("androidx.compose.ui:ui-tooling:1.5.0")
    debugImplementation("androidx.compose.ui:ui-test-manifest:1.5.0")

    implementation("com.squareup.okhttp3:logging-interceptor:4.9.1")
    implementation ("androidx.viewpager2:viewpager2:1.0.0")

    // Add JUnit dependency for unit tests
    testImplementation("junit:junit:4.13.2")
}


gradle.properties:

# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true

# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true

# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official

# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

# Enable Kapt Incremental Processing
kapt.incremental.apt=true


gradle.wrapper.properties:

#Tue Jun 25 12:08:31 ICT 2024
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.6-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists


local.properties:

## This file is automatically generated by Android Studio.
# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
#
# This file should *NOT* be checked into Version Control Systems,
# as it contains information specific to your local configuration.
#
# Location of the SDK. This is only used by Gradle.
# For customization when using a Version Control System, please read the
# header note.
sdk.dir=C\:\\Users\\gijs\\AppData\\Local\\Android\\Sdk


settings.gradle.kts:

pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "RRHE"
include(":app")
 